(progn

(def list (fn (:rest args) args))

(def defn (mac (name arg-list body)
  (list (quote def) name
    (list (quote fn)
          (cons (quote :self) (cons name arg-list))
          body))))

(def defmac
  (mac (name arg-list body)
    (list (quote def) name
      (list (quote mac)
            (cons (quote :self) (cons name arg-list))
            body))))

(defmac when (cond rest)
  (list (quote if) cond rest (quote nil)))

(defmac unless (cond rest)
  (list (quote if) cond (quote nil) rest))

(defn map (func seq)
  (unless (= nil list)
    (cons (func (car list))
    (map func (cdr list)))))

(defn incf (x) (+ x 1))

(defn load (filename)
  (eval (read (open-file filename))))

(defn single-quote-reader (stream char) (list (quote quote) (read stream)))
(set-macro-character #' single-quote-reader)

(defn comment-character (stream char)
  (if (= char #newline)
      (read stream)
      (comment-character stream (next stream))))

(set-macro-character #; comment-character)

)
